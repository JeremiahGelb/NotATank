// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: motor_control.proto
#ifndef GRPC_motor_5fcontrol_2eproto__INCLUDED
#define GRPC_motor_5fcontrol_2eproto__INCLUDED

#include "motor_control.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

class MotorControl final {
 public:
  static constexpr char const* service_full_name() {
    return "MotorControl";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SetCannonPosition(::grpc::ClientContext* context, const ::Coordinates& request, ::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Status>> AsyncSetCannonPosition(::grpc::ClientContext* context, const ::Coordinates& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Status>>(AsyncSetCannonPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Status>> PrepareAsyncSetCannonPosition(::grpc::ClientContext* context, const ::Coordinates& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Status>>(PrepareAsyncSetCannonPositionRaw(context, request, cq));
    }
    virtual ::grpc::Status FireCannon(::grpc::ClientContext* context, const ::Request& request, ::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Status>> AsyncFireCannon(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Status>>(AsyncFireCannonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Status>> PrepareAsyncFireCannon(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Status>>(PrepareAsyncFireCannonRaw(context, request, cq));
    }
    virtual ::grpc::Status LoadCannon(::grpc::ClientContext* context, const ::Request& request, ::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Status>> AsyncLoadCannon(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Status>>(AsyncLoadCannonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Status>> PrepareAsyncLoadCannon(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Status>>(PrepareAsyncLoadCannonRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCannonInfo(::grpc::ClientContext* context, const ::Request& request, ::CannonInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CannonInfo>> AsyncGetCannonInfo(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CannonInfo>>(AsyncGetCannonInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CannonInfo>> PrepareAsyncGetCannonInfo(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CannonInfo>>(PrepareAsyncGetCannonInfoRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Status>* AsyncSetCannonPositionRaw(::grpc::ClientContext* context, const ::Coordinates& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Status>* PrepareAsyncSetCannonPositionRaw(::grpc::ClientContext* context, const ::Coordinates& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Status>* AsyncFireCannonRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Status>* PrepareAsyncFireCannonRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Status>* AsyncLoadCannonRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Status>* PrepareAsyncLoadCannonRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CannonInfo>* AsyncGetCannonInfoRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CannonInfo>* PrepareAsyncGetCannonInfoRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SetCannonPosition(::grpc::ClientContext* context, const ::Coordinates& request, ::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Status>> AsyncSetCannonPosition(::grpc::ClientContext* context, const ::Coordinates& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Status>>(AsyncSetCannonPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Status>> PrepareAsyncSetCannonPosition(::grpc::ClientContext* context, const ::Coordinates& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Status>>(PrepareAsyncSetCannonPositionRaw(context, request, cq));
    }
    ::grpc::Status FireCannon(::grpc::ClientContext* context, const ::Request& request, ::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Status>> AsyncFireCannon(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Status>>(AsyncFireCannonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Status>> PrepareAsyncFireCannon(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Status>>(PrepareAsyncFireCannonRaw(context, request, cq));
    }
    ::grpc::Status LoadCannon(::grpc::ClientContext* context, const ::Request& request, ::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Status>> AsyncLoadCannon(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Status>>(AsyncLoadCannonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Status>> PrepareAsyncLoadCannon(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Status>>(PrepareAsyncLoadCannonRaw(context, request, cq));
    }
    ::grpc::Status GetCannonInfo(::grpc::ClientContext* context, const ::Request& request, ::CannonInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CannonInfo>> AsyncGetCannonInfo(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CannonInfo>>(AsyncGetCannonInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CannonInfo>> PrepareAsyncGetCannonInfo(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CannonInfo>>(PrepareAsyncGetCannonInfoRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::Status>* AsyncSetCannonPositionRaw(::grpc::ClientContext* context, const ::Coordinates& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Status>* PrepareAsyncSetCannonPositionRaw(::grpc::ClientContext* context, const ::Coordinates& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Status>* AsyncFireCannonRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Status>* PrepareAsyncFireCannonRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Status>* AsyncLoadCannonRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Status>* PrepareAsyncLoadCannonRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CannonInfo>* AsyncGetCannonInfoRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CannonInfo>* PrepareAsyncGetCannonInfoRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetCannonPosition_;
    const ::grpc::internal::RpcMethod rpcmethod_FireCannon_;
    const ::grpc::internal::RpcMethod rpcmethod_LoadCannon_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCannonInfo_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SetCannonPosition(::grpc::ServerContext* context, const ::Coordinates* request, ::Status* response);
    virtual ::grpc::Status FireCannon(::grpc::ServerContext* context, const ::Request* request, ::Status* response);
    virtual ::grpc::Status LoadCannon(::grpc::ServerContext* context, const ::Request* request, ::Status* response);
    virtual ::grpc::Status GetCannonInfo(::grpc::ServerContext* context, const ::Request* request, ::CannonInfo* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetCannonPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetCannonPosition() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetCannonPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCannonPosition(::grpc::ServerContext* context, const ::Coordinates* request, ::Status* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCannonPosition(::grpc::ServerContext* context, ::Coordinates* request, ::grpc::ServerAsyncResponseWriter< ::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FireCannon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FireCannon() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FireCannon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FireCannon(::grpc::ServerContext* context, const ::Request* request, ::Status* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFireCannon(::grpc::ServerContext* context, ::Request* request, ::grpc::ServerAsyncResponseWriter< ::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadCannon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_LoadCannon() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_LoadCannon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadCannon(::grpc::ServerContext* context, const ::Request* request, ::Status* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadCannon(::grpc::ServerContext* context, ::Request* request, ::grpc::ServerAsyncResponseWriter< ::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCannonInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetCannonInfo() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetCannonInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCannonInfo(::grpc::ServerContext* context, const ::Request* request, ::CannonInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCannonInfo(::grpc::ServerContext* context, ::Request* request, ::grpc::ServerAsyncResponseWriter< ::CannonInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetCannonPosition<WithAsyncMethod_FireCannon<WithAsyncMethod_LoadCannon<WithAsyncMethod_GetCannonInfo<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SetCannonPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetCannonPosition() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetCannonPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCannonPosition(::grpc::ServerContext* context, const ::Coordinates* request, ::Status* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FireCannon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FireCannon() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FireCannon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FireCannon(::grpc::ServerContext* context, const ::Request* request, ::Status* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadCannon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_LoadCannon() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_LoadCannon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadCannon(::grpc::ServerContext* context, const ::Request* request, ::Status* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCannonInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetCannonInfo() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetCannonInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCannonInfo(::grpc::ServerContext* context, const ::Request* request, ::CannonInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetCannonPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetCannonPosition() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::Coordinates, ::Status>(std::bind(&WithStreamedUnaryMethod_SetCannonPosition<BaseClass>::StreamedSetCannonPosition, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetCannonPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetCannonPosition(::grpc::ServerContext* context, const ::Coordinates* request, ::Status* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetCannonPosition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Coordinates,::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FireCannon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FireCannon() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::Request, ::Status>(std::bind(&WithStreamedUnaryMethod_FireCannon<BaseClass>::StreamedFireCannon, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FireCannon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FireCannon(::grpc::ServerContext* context, const ::Request* request, ::Status* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFireCannon(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Request,::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadCannon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_LoadCannon() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::Request, ::Status>(std::bind(&WithStreamedUnaryMethod_LoadCannon<BaseClass>::StreamedLoadCannon, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_LoadCannon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadCannon(::grpc::ServerContext* context, const ::Request* request, ::Status* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadCannon(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Request,::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCannonInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetCannonInfo() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::Request, ::CannonInfo>(std::bind(&WithStreamedUnaryMethod_GetCannonInfo<BaseClass>::StreamedGetCannonInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetCannonInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCannonInfo(::grpc::ServerContext* context, const ::Request* request, ::CannonInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCannonInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Request,::CannonInfo>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetCannonPosition<WithStreamedUnaryMethod_FireCannon<WithStreamedUnaryMethod_LoadCannon<WithStreamedUnaryMethod_GetCannonInfo<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetCannonPosition<WithStreamedUnaryMethod_FireCannon<WithStreamedUnaryMethod_LoadCannon<WithStreamedUnaryMethod_GetCannonInfo<Service > > > > StreamedService;
};


#endif  // GRPC_motor_5fcontrol_2eproto__INCLUDED
