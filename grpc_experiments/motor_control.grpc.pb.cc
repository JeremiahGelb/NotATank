// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: motor_control.proto

#include "motor_control.pb.h"
#include "motor_control.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>

static const char* MotorControl_method_names[] = {
  "/MotorControl/SetCannonPosition",
  "/MotorControl/GetCannonInfo",
};

std::unique_ptr< MotorControl::Stub> MotorControl::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< MotorControl::Stub> stub(new MotorControl::Stub(channel));
  return stub;
}

MotorControl::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SetCannonPosition_(MotorControl_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCannonInfo_(MotorControl_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MotorControl::Stub::SetCannonPosition(::grpc::ClientContext* context, const ::Coordinates& request, ::MotorControlResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCannonPosition_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::MotorControlResponse>* MotorControl::Stub::AsyncSetCannonPositionRaw(::grpc::ClientContext* context, const ::Coordinates& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MotorControlResponse>::Create(channel_.get(), cq, rpcmethod_SetCannonPosition_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MotorControlResponse>* MotorControl::Stub::PrepareAsyncSetCannonPositionRaw(::grpc::ClientContext* context, const ::Coordinates& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MotorControlResponse>::Create(channel_.get(), cq, rpcmethod_SetCannonPosition_, context, request, false);
}

::grpc::Status MotorControl::Stub::GetCannonInfo(::grpc::ClientContext* context, const ::MotorControlRequest& request, ::CannonInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCannonInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::CannonInfo>* MotorControl::Stub::AsyncGetCannonInfoRaw(::grpc::ClientContext* context, const ::MotorControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CannonInfo>::Create(channel_.get(), cq, rpcmethod_GetCannonInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::CannonInfo>* MotorControl::Stub::PrepareAsyncGetCannonInfoRaw(::grpc::ClientContext* context, const ::MotorControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CannonInfo>::Create(channel_.get(), cq, rpcmethod_GetCannonInfo_, context, request, false);
}

MotorControl::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MotorControl_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MotorControl::Service, ::Coordinates, ::MotorControlResponse>(
          std::mem_fn(&MotorControl::Service::SetCannonPosition), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MotorControl_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MotorControl::Service, ::MotorControlRequest, ::CannonInfo>(
          std::mem_fn(&MotorControl::Service::GetCannonInfo), this)));
}

MotorControl::Service::~Service() {
}

::grpc::Status MotorControl::Service::SetCannonPosition(::grpc::ServerContext* context, const ::Coordinates* request, ::MotorControlResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MotorControl::Service::GetCannonInfo(::grpc::ServerContext* context, const ::MotorControlRequest* request, ::CannonInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


